<?php

/**
 * @file
 * Defines all the hooks this module implements.
 */

function uvl_dynamic_block_info() {
  $blocks['search_all_items'] = [
    // info: Search all items.
    'info' => t('Search all items'),
  ];
  $blocks['collection_menu'] = [
    // info: Search all items.
    'info' => t('Collection menu'),
  ];

  return $blocks;
}

/**
 * Implements hook_block_view();
 */
function uvl_dynamic_block_view($delta = '') {
  $block = NULL;
  switch ($delta) {
    case 'search_all_items':
      // Set block title.
      $block['subject'] = t('All items');
      // Get the collection ID from path
      $path = drupal_parse_url(current_path());

      if (!empty($path['path']) && is_string($path['path'])) {
        $collection_id = explode('/', $path['path']);
        $collection_id = end($collection_id);

        if (drupal_is_front_page()) {
          $node_id = $collection_id;
        }
        else {
          // Query the collection by collection ID field value.
          $query = new EntityFieldQuery();
          $query->entityCondition('entity_type', 'node')
            ->entityCondition('bundle', 'collection', '=')
            ->propertyCondition('status', NODE_PUBLISHED)
            ->fieldCondition('field_collection_id', 'value', $collection_id, '=')
            ->range(0, 1);
          $result =$query->execute();

          // Search on subcollection when there are no results.
          if (!$result) {
            $query = new EntityFieldQuery();
            $query->entityCondition('entity_type', 'node')
              ->entityCondition('bundle', 'subcollection', '=')
              ->propertyCondition('status', NODE_PUBLISHED)
              ->fieldCondition('field_collection_identifier', 'value', $collection_id, '=')
              ->range(0, 1);
            $result =$query->execute();
          }
          if (is_array($result)) {
            $result = end($result);
            if (is_array($result)) {
              $result = end($result);
              if (is_object($result)) {
                $node_id = $result->nid;
              }
            }
          }
        }

        if (isset($node_id)) {
          $node = node_load($node_id);

          // Only display block content when field_all_items_link is set.
          if ($node && !empty($node->field_all_items_link[LANGUAGE_NONE][0]['url'])) {
            $url = $node->field_all_items_link[LANGUAGE_NONE][0]['url'];
            $title = $node->field_all_items_link[LANGUAGE_NONE][0]['title'];
            $block['content'] = l($title, $parsed['path']);
          }
        }
      }
      break;

    case 'collection_menu':
      // Get collection ID from path and render menu item when available.
      $path = explode('/', current_path());
      $collection_id = $path[2];
      if (!empty($collection_id) && strpos($collection_id, 'collection:') === 0) {
        $block['title'] = t('Subcollections');
        if ($menu = _collection_menu_block_content($collection_id)) {
          $block['content'] = $menu;
        }
      }
      break;
  }

  return $block;
}

/**
 * Generates output of a menu tree starting from dynamic item.
 *
 * @param string $collection_id
 *   Collection identifier (PID).
 *
 * @return array|bool
 *   Menu build array or false if nothing found.
 */
function _collection_menu_block_content($collection_id) {
  $menu = 'menu-sub-collections';
  $tree = menu_tree_all_data($menu);
  foreach ($tree as $branch){
    if ($branch['link']['title'] == $collection_id){
      $childtree = $branch['below'];
      break;
    }
  }
  return !empty($childtree) ? menu_tree_output($childtree) : false;
}

